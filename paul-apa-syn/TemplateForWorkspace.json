{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "paul-apa-syn"
		},
		"paul-apa-syn-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'paul-apa-syn-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:paul-apa-syn.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"paul-apa-syn-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://paulapadl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/paul-apa-syn-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('paul-apa-syn-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/paul-apa-syn-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('paul-apa-syn-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RawDataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "samplesp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e9cd3740-5264-4bf7-b7a0-d6e847ce5756"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/471c3172-215c-4465-9229-f07e1bdc7049/resourceGroups/paul-apa-rg/providers/Microsoft.Synapse/workspaces/paul-apa-syn/bigDataPools/samplesp",
						"name": "samplesp",
						"type": "Spark",
						"endpoint": "https://paul-apa-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/samplesp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime, timedelta\r\n",
							"import json\r\n",
							"import pandas as pd\r\n",
							"import random\r\n",
							"from uuid import uuid4\r\n",
							"from pyspark.sql.functions import to_date"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def create_sample(node_id: str, value: int, source_timestamp: datetime, status_code: str):\r\n",
							"  return {\r\n",
							"    \"NodeId\": node_id,\r\n",
							"    \"Value\": value,\r\n",
							"    \"SourceTimestamp\": source_timestamp,\r\n",
							"    \"StatusCode\": status_code\r\n",
							"  }\r\n",
							"\r\n",
							"def generate_samples(\r\n",
							"  number_of_nodes: int,\r\n",
							"  number_of_values_per_node: int,\r\n",
							"  timestamp_variance_in_seconds: int,\r\n",
							"  start_time: datetime):\r\n",
							"  samples = []\r\n",
							"  status_code = 0\r\n",
							"\r\n",
							"  for _ in range(number_of_nodes):\r\n",
							"    guid = str(uuid4())\r\n",
							"    for _ in range(number_of_values_per_node):\r\n",
							"        node_id = f\"ns=2;s=Number\\\\{guid}\"\r\n",
							"\r\n",
							"        value = random.randint(0, number_of_nodes)\r\n",
							"        source_timestamp_delta_in_seconds = random.randint(0, timestamp_variance_in_seconds)\r\n",
							"        source_timestamp = start_time + timedelta(0, source_timestamp_delta_in_seconds)\r\n",
							"\r\n",
							"        sample = create_sample(node_id, value, source_timestamp, status_code)\r\n",
							"        samples.append(sample)\r\n",
							"\r\n",
							"  df = pd.DataFrame(samples)\r\n",
							"  return df"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"number_of_nodes = 10000\r\n",
							"number_of_values_per_node = 180\r\n",
							"timestamp_variance_in_seconds = 60*60*24*180\r\n",
							"start_time = datetime(2022, 12, 4)\r\n",
							"df = generate_samples(number_of_nodes, number_of_values_per_node, timestamp_variance_in_seconds, start_time)\r\n",
							"\r\n",
							"print(\"Number of Samples:\", len(df))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# writing out the dataframe\r\n",
							"spark_df = spark.createDataFrame(df)\r\n",
							"spark_df = spark_df \\\r\n",
							"    .withColumn(\"Date\", to_date(\"SourceTimestamp\"))\r\n",
							"spark_df.write.partitionBy(\"Date\").format(\"parquet\").mode(\"overwrite\").save(\"raw_data\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WriteAvro')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "samplesp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4c2ccebf-a67f-422e-9ce2-0375636ab2cc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"480707e8-9a88-4d15-9f52-1bed71cb9f4e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "2846",
												"2": "2023-05-26 00:33:46",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "9080",
												"2": "2023-05-26 16:22:55",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "8980",
												"2": "2023-05-26 22:57:35",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "4295",
												"2": "2023-05-26 07:34:19",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "7857",
												"2": "2023-05-26 07:37:51",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "1821",
												"2": "2023-05-26 02:59:41",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "6338",
												"2": "2023-05-26 21:03:43",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "9475",
												"2": "2023-05-26 08:36:36",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "4185",
												"2": "2023-05-26 10:15:10",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\e56d2f93-6288-4ae0-b5e4-73f566a468ef",
												"1": "2502",
												"2": "2023-05-26 22:02:12",
												"3": "0",
												"4": "2023-05-26"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "NodeId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "Value",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "SourceTimestamp",
												"type": "timestamp"
											},
											{
												"key": "3",
												"name": "StatusCode",
												"type": "bigint"
											},
											{
												"key": "4",
												"name": "Date",
												"type": "date"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/471c3172-215c-4465-9229-f07e1bdc7049/resourceGroups/paul-apa-rg/providers/Microsoft.Synapse/workspaces/paul-apa-syn/bigDataPools/samplesp",
						"name": "samplesp",
						"type": "Spark",
						"endpoint": "https://paul-apa-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/samplesp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# import the packages\r\n",
							"import time"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# read the raw spark dataframe\r\n",
							"\r\n",
							"df = spark.read.format(\"parquet\").load(\"raw_data\")\r\n",
							"print(f\"pandas df size: {df.count()}\")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# writing out the \r\n",
							"start_time = time.perf_counter()\r\n",
							"df.write.partitionBy(\"Date\").mode('overwrite').format(\"avro\").save(\"avro_write\")\r\n",
							"elapsed_time = time.perf_counter() - start_time\r\n",
							"print(f\"Elapsed time: {elapsed_time:0.4f} seconds\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import Row\r\n",
							"\r\n",
							"output_df = spark.createDataFrame([Row(write_time=elapsed_time)])\r\n",
							"output_df.write.mode('append').save('avro_write_times')"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WriteDelta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "samplesp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ad50a240-97c3-4875-8274-2e9b8ac65454"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/471c3172-215c-4465-9229-f07e1bdc7049/resourceGroups/paul-apa-rg/providers/Microsoft.Synapse/workspaces/paul-apa-syn/bigDataPools/samplesp",
						"name": "samplesp",
						"type": "Spark",
						"endpoint": "https://paul-apa-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/samplesp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# import the packages\r\n",
							"import time"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# read the raw spark dataframe\r\n",
							"\r\n",
							"df = spark.read.format(\"parquet\").load(\"raw_data\")\r\n",
							"display(df.limit(10))"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# writing out the \r\n",
							"start_time = time.perf_counter()\r\n",
							"df.write.partitionBy(\"Date\").mode('overwrite').format(\"delta\").save(\"delta_write\")\r\n",
							"elapsed_time = time.perf_counter() - start_time\r\n",
							"print(f\"Elapsed time: {elapsed_time:0.4f} seconds\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import Row\r\n",
							"\r\n",
							"output_df = spark.createDataFrame([Row(write_time=elapsed_time)])\r\n",
							"output_df.write.mode('append').save('delta_write_times')"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WriteParquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "samplesp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a9bbd457-8300-4b57-b2d2-0a2075835a9b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"49d611cb-034b-4429-996d-403044a0b8c0": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "2846",
												"2": "2023-05-26 00:33:46",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "9080",
												"2": "2023-05-26 16:22:55",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
												"1": "8980",
												"2": "2023-05-26 22:57:35",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "4295",
												"2": "2023-05-26 07:34:19",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "7857",
												"2": "2023-05-26 07:37:51",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
												"1": "1821",
												"2": "2023-05-26 02:59:41",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "6338",
												"2": "2023-05-26 21:03:43",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "9475",
												"2": "2023-05-26 08:36:36",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
												"1": "4185",
												"2": "2023-05-26 10:15:10",
												"3": "0",
												"4": "2023-05-26"
											},
											{
												"0": "ns=2;s=Number\\e56d2f93-6288-4ae0-b5e4-73f566a468ef",
												"1": "2502",
												"2": "2023-05-26 22:02:12",
												"3": "0",
												"4": "2023-05-26"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "NodeId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "Value",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "SourceTimestamp",
												"type": "timestamp"
											},
											{
												"key": "3",
												"name": "StatusCode",
												"type": "bigint"
											},
											{
												"key": "4",
												"name": "Date",
												"type": "date"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/471c3172-215c-4465-9229-f07e1bdc7049/resourceGroups/paul-apa-rg/providers/Microsoft.Synapse/workspaces/paul-apa-syn/bigDataPools/samplesp",
						"name": "samplesp",
						"type": "Spark",
						"endpoint": "https://paul-apa-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/samplesp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# import the packages\r\n",
							"import time"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# read the raw spark dataframe\r\n",
							"\r\n",
							"df = spark.read.format(\"parquet\").load(\"raw_data\")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# writing out the \r\n",
							"start_time = time.perf_counter()\r\n",
							"df.write.partitionBy(\"Date\").mode('overwrite').format(\"parquet\").save(\"parquet_write\")\r\n",
							"elapsed_time = time.perf_counter() - start_time\r\n",
							"print(f\"Elapsed time: {elapsed_time:0.4f} seconds\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import Row\r\n",
							"\r\n",
							"output_df = spark.createDataFrame([Row(write_time=elapsed_time)])\r\n",
							"output_df.write.mode('append').save('parquet_write_times')"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/samplesp')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus3"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writeavro')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "write avro",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "WriteAvro",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "samplesp",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": true
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/WriteAvro')]",
				"[concat(variables('workspaceId'), '/bigDataPools/samplesp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writedelta')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "write delta",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "WriteDelta",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "samplesp",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": true
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/WriteDelta')]",
				"[concat(variables('workspaceId'), '/bigDataPools/samplesp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writeparquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "write parquet",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "WriteParquet",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "samplesp",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": true
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/WriteParquet')]",
				"[concat(variables('workspaceId'), '/bigDataPools/samplesp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writeavro')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "writeavro",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2022-12-08T03:13:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/writeavro')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writedelta')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "writedelta",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2022-12-08T03:14:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/writedelta')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/writeparquet')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "writeparquet",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2022-12-08T03:15:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/writeparquet')]"
			]
		}
	]
}